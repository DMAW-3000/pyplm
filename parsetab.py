
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftASSIGNleftORleftANDleftNOTleftGREATERTHANLESSTHANEQUALNOTEQUALGREATERTHANEQUALLESSTHANEQUALleftPLUSMINUSleftASTERIXDIVMODleftRPARENSLPARENSleftIDENTleftSTRINGleftHEXNUMBERDECNUMBERBINNUMBERADDRESS AND ASSIGN ASTERIX AT BASED BINNUMBER BY BYTE CALL CASE COLON COMMA DATA DECLARE DECNUMBER DIV DO ELSE END EQUAL EXTERNAL GO GREATERTHAN GREATERTHANEQUAL HEXNUMBER IDENT IF LCOMMENT LESSTHAN LESSTHANEQUAL LITERALLY LPARENS MINUS MOD NOT NOTEQUAL OR PERIOD PLUS PROCEDURE RETURN RPARENS SEMICOLON SQUOTE STRING STRUCTURE THEN TO WHILEstatements : statements statement\n                  | statementstatement : declare_statement\n                  | label_statement\n                  | code_statementcode_statement : control_statement\n                       | exec_statementcontrol_statement : if_then_statement\n                          | else_statement\n                          | do_while_statement\n                          | do_to_statement\n                          | do_case_statementexec_statement : end_statement\n                       | goto_statement\n                       | do_statement\n                       | assign_statement\n                       | call_statement\n                       | return_statementlabel_statement : IDENT COLONdeclare_statement : DECLARE declare_list SEMICOLON\n                          | declare_procedure\n                          | end_proceduredeclare_list : declare_list1 declare_name\n                    | declare_namedeclare_list1 : declare_list1 declare_name COMMA\n                      | declare_name COMMAdeclare_name : declare_literal\n                     | declare_variable\n                     | declare_variable_list\n                     | declare_variable_init\n                     | declare_variable_at\n                     | declare_variable_based \n                     | declare_variable_ext\n                     | declare_array\n                     | declare_array_init1\n                     | declare_array_init2\n                     | declare_string\n                     | declare_array_at\n                     | declare_array_based\n                     | declare_array_ext\n                     | declare_struct_baseddeclare_literal : IDENT LITERALLY STRINGvariable_type : BYTE \n                      | ADDRESSdeclare_variable : IDENT variable_typedeclare_variable_list : LPARENS vars_list RPARENS variable_typevars_list : vars_list1 IDENTvars_list1 : vars_list1 IDENT COMMA\n                   | IDENT COMMAdeclare_variable_init : IDENT variable_type DATA LPARENS init_data RPARENSdeclare_variable_at : IDENT variable_type AT LPARENS init_data RPARENS\n                            | IDENT variable_type AT LPARENS PERIOD IDENT LPARENS number RPARENS RPARENSdeclare_variable_based : IDENT BASED IDENT variable_typedeclare_variable_ext : IDENT variable_type EXTERNALinit_data : number\n                  | referencedeclare_array : IDENT LPARENS number RPARENS variable_typedeclare_array_init1 : IDENT LPARENS array_init_list RPARENS variable_typedeclare_array_init2 : IDENT LPARENS number RPARENS variable_type DATA LPARENS array_init_list RPARENSarray_init_list : array_init_list1 array_init_data\n                        | array_init_dataarray_init_list1 : array_init_list1 array_init_data COMMA\n                         | array_init_data COMMAarray_init_data : init_data\n                        | STRINGdeclare_string : IDENT LPARENS ASTERIX RPARENS variable_type DATA LPARENS STRING RPARENS\n                       | IDENT LPARENS ASTERIX RPARENS variable_type DATA LPARENS array_init_list RPARENSdeclare_array_at : IDENT LPARENS number RPARENS variable_type AT LPARENS init_data RPARENSdeclare_array_based : IDENT BASED IDENT LPARENS number RPARENS variable_typedeclare_array_ext : IDENT LPARENS number RPARENS variable_type EXTERNALdeclare_struct_based : IDENT BASED IDENT STRUCTURE LPARENS struct_list RPARENSstruct_list : struct_list1 IDENT variable_type\n                    | IDENT variable_typestruct_list1 : struct_list1 IDENT variable_type COMMA\n                     | IDENT variable_type COMMAdeclare_procedure : procedure_arg0\n                          | procedure_arg0_noret\n                          | procedure_arg1\n                          | procedure_arg1_noret\n                          | procedure_arg2\n                          | procedure_arg2_ext\n                          | procedure_arg2_noret\n                          | procedure_arg2_noret_ext\n                          | procedure_arg3\n                          | procedure_arg3_noretprocedure_arg0 : IDENT COLON PROCEDURE variable_type SEMICOLONprocedure_arg0_noret : IDENT COLON PROCEDURE SEMICOLONprocedure_arg1 : IDENT COLON PROCEDURE LPARENS IDENT RPARENS variable_type SEMICOLONprocedure_arg1_noret : IDENT COLON PROCEDURE LPARENS IDENT RPARENS SEMICOLONprocedure_arg2 : IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS variable_type SEMICOLONprocedure_arg2_noret : IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS SEMICOLONprocedure_arg2_ext : IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS variable_type EXTERNAL SEMICOLONprocedure_arg2_noret_ext : IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS EXTERNAL SEMICOLONprocedure_arg3 : IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT COMMA IDENT RPARENS variable_type SEMICOLONprocedure_arg3_noret : IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT COMMA IDENT RPARENS SEMICOLONdo_statement : DO SEMICOLONcond_expr : rel_expr\n                  | bool_expr\n                  | logic_exprdo_while_statement : DO WHILE cond_expr SEMICOLONdo_case_statement : DO CASE expr SEMICOLONdo_to_statement : DO IDENT EQUAL expr TO expr SEMICOLON\n                        | DO IDENT EQUAL expr TO expr BY expr SEMICOLONend_statement : END SEMICOLONend_procedure : END IDENT SEMICOLONif_then_statement : IF cond_expr THEN code_statementelse_statement : ELSE code_statementgoto_statement : GO TO IDENT SEMICOLONcall_statement : CALL IDENT SEMICOLON\n                       | CALL IDENT LPARENS expr RPARENS SEMICOLON\n                       | CALL IDENT LPARENS expr COMMA expr RPARENS SEMICOLON\n                       | CALL IDENT LPARENS expr COMMA expr COMMA expr RPARENS SEMICOLONreturn_statement : RETURN SEMICOLON\n                         | RETURN expr SEMICOLONassign_statement : assign_list EQUAL expr SEMICOLONassign_list : assign_list1 assign_var\n                    | assign_varassign_list1 : assign_list1 assign_var COMMA\n                    | assign_var COMMAassign_var : IDENT LPARENS expr RPARENS\n                  | IDENTexpr : element_expr\n             | arith_expr\n             | logic_expr\n             | rel_expr\n             | LPARENS expr RPARENSarith_expr : add_expr\n                   | sub_expr\n                   | mul_expr\n                   | div_expr\n                   | mod_exprlogic_expr : and_expr\n                   | or_expr\n                   | not_exprrel_expr : noteq_expr\n                 | eq_expr\n                 | lt_expr\n                 | gt_expr\n                 | lteq_expr\n                 | gteq_expradd_expr : expr PLUS exprsub_expr : expr MINUS exprmul_expr : expr ASTERIX exprdiv_expr : expr DIV exprmod_expr : expr MOD exprand_expr : expr AND expror_expr : expr OR exprnot_expr : NOT expreq_expr : expr EQUAL exprnoteq_expr : expr NOTEQUAL exprlt_expr : expr LESSTHAN exprlteq_expr : expr LESSTHANEQUAL exprgt_expr : expr GREATERTHAN exprgteq_expr : expr GREATERTHANEQUAL exprbool_expr : element_exprelement_expr : number\n                     | IDENT\n                     | IDENT LPARENS expr RPARENS\n                     | proc_call2\n                     | proc_call3\n                     | reference\n                     | reference LPARENS expr RPARENS\n                     | inplace_assign\n                     | struct_itemproc_call2 : IDENT LPARENS expr COMMA expr RPARENSproc_call3 : IDENT LPARENS expr COMMA expr COMMA expr RPARENSinplace_assign : IDENT ASSIGN expr\n                       | LPARENS IDENT ASSIGN expr RPARENSreference : PERIOD IDENT\n                  | PERIOD LPARENS ref_init_list RPARENSref_init_list : ref_init_list1 ref_data\n                      | ref_dataref_init_list1 : ref_init_list1 ref_data COMMA\n                       | ref_data COMMAref_data : number\n                 | STRINGstruct_item : IDENT PERIOD IDENTnumber : DECNUMBER\n               | HEXNUMBER\n               | BINNUMBER'
    
_lr_action_items = {'DECLARE':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,43,64,67,102,106,112,119,133,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[6,6,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-1,-19,-104,-107,-96,-113,-20,-105,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'IDENT':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,39,40,41,43,45,63,64,65,67,85,91,96,102,105,106,108,109,110,112,118,119,121,125,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,153,158,162,163,164,165,166,182,184,185,187,205,212,214,215,216,230,231,234,240,242,245,251,253,258,270,272,274,276,277,278,288,289,294,300,304,307,314,316,318,319,322,323,324,],[9,9,-2,-3,-4,-5,62,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,66,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,84,103,107,111,84,103,-1,62,130,-19,84,-104,152,84,155,-107,84,-96,84,160,84,-113,-119,-20,-26,179,181,-105,103,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,203,84,84,-109,84,-114,-118,-25,-49,-87,232,-106,84,-100,-101,-108,-115,-48,-86,84,84,84,262,268,273,-110,287,-89,84,-102,84,84,-88,302,-111,-75,-91,-103,-74,-90,-93,-112,-95,-92,-94,]),'END':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,43,64,67,102,106,112,119,133,134,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[22,22,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,104,-1,-19,-104,-107,-96,-113,-20,-105,104,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'IF':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,43,64,67,102,106,112,119,133,134,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[34,34,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,34,-1,-19,-104,-107,-96,-113,-20,-105,34,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'ELSE':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,43,64,67,102,106,112,119,133,134,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[35,35,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,35,-1,-19,-104,-107,-96,-113,-20,-105,35,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'DO':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,43,64,67,102,106,112,119,133,134,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[36,36,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,36,-1,-19,-104,-107,-96,-113,-20,-105,36,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'GO':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,43,64,67,102,106,112,119,133,134,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[37,37,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,37,-1,-19,-104,-107,-96,-113,-20,-105,37,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'CALL':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,43,64,67,102,106,112,119,133,134,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[39,39,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,39,-1,-19,-104,-107,-96,-113,-20,-105,39,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'RETURN':([0,1,2,3,4,5,7,8,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,35,43,64,67,102,106,112,119,133,134,162,164,184,187,212,214,215,216,231,258,272,276,288,294,304,307,316,318,319,322,323,324,],[40,40,-2,-3,-4,-5,-21,-22,-6,-7,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,40,-1,-19,-104,-107,-96,-113,-20,-105,40,-109,-114,-87,-106,-100,-101,-108,-115,-86,-110,-89,-102,-88,-111,-91,-103,-90,-93,-112,-95,-92,-94,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,],[1,]),'statement':([0,1,],[2,43,]),'declare_statement':([0,1,],[3,3,]),'label_statement':([0,1,],[4,4,]),'code_statement':([0,1,35,134,],[5,5,102,187,]),'declare_procedure':([0,1,],[7,7,]),'end_procedure':([0,1,],[8,8,]),'control_statement':([0,1,35,134,],[10,10,10,10,]),'exec_statement':([0,1,35,134,],[11,11,11,11,]),'procedure_arg0':([0,1,],[12,12,]),'procedure_arg0_noret':([0,1,],[13,13,]),'procedure_arg1':([0,1,],[14,14,]),'procedure_arg1_noret':([0,1,],[15,15,]),'procedure_arg2':([0,1,],[16,16,]),'procedure_arg2_ext':([0,1,],[17,17,]),'procedure_arg2_noret':([0,1,],[18,18,]),'procedure_arg2_noret_ext':([0,1,],[19,19,]),'procedure_arg3':([0,1,],[20,20,]),'procedure_arg3_noret':([0,1,],[21,21,]),'if_then_statement':([0,1,35,134,],[23,23,23,23,]),'else_statement':([0,1,35,134,],[24,24,24,24,]),'do_while_statement':([0,1,35,134,],[25,25,25,25,]),'do_to_statement':([0,1,35,134,],[26,26,26,26,]),'do_case_statement':([0,1,35,134,],[27,27,27,27,]),'end_statement':([0,1,35,134,],[28,28,28,28,]),'goto_statement':([0,1,35,134,],[29,29,29,29,]),'do_statement':([0,1,35,134,],[30,30,30,30,]),'assign_statement':([0,1,35,134,],[31,31,31,31,]),'call_statement':([0,1,35,134,],[32,32,32,32,]),'return_statement':([0,1,35,134,],[33,33,33,33,]),'assign_list':([0,1,35,134,],[38,38,38,38,]),'assign_list1':([0,1,35,134,],[41,41,41,41,]),'assign_var':([0,1,35,41,134,],[42,42,42,117,42,]),'declare_list':([6,],[44,]),'declare_list1':([6,],[45,]),'declare_name':([6,45,],[46,120,]),'declare_literal':([6,45,],[47,47,]),'declare_variable':([6,45,],[48,48,]),'declare_variable_list':([6,45,],[49,49,]),'declare_variable_init':([6,45,],[50,50,]),'declare_variable_at':([6,45,],[51,51,]),'declare_variable_based':([6,45,],[52,52,]),'declare_variable_ext':([6,45,],[53,53,]),'declare_array':([6,45,],[54,54,]),'declare_array_init1':([6,45,],[55,55,]),'declare_array_init2':([6,45,],[56,56,]),'declare_string':([6,45,],[57,57,]),'declare_array_at':([6,45,],[58,58,]),'declare_array_based':([6,45,],[59,59,]),'declare_array_ext':([6,45,],[60,60,]),'declare_struct_based':([6,45,],[61,61,]),'cond_expr':([34,105,],[68,157,]),'rel_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[69,116,116,116,116,69,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'bool_expr':([34,105,],[70,70,]),'logic_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[71,115,115,115,115,71,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'noteq_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'eq_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'lt_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'gt_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'lteq_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'gteq_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'element_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[78,114,114,114,114,78,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'and_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'or_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'not_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[82,113,132,151,154,82,159,161,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,206,213,217,235,254,257,259,291,292,293,]),'number':([34,40,65,85,91,105,108,110,124,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,156,158,163,176,205,208,218,219,227,234,240,242,274,277,278,280,281,282,283,],[83,83,83,83,83,83,83,83,171,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,210,83,83,224,83,210,224,224,250,83,83,83,83,83,83,295,224,224,224,]),'proc_call2':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'proc_call3':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'reference':([34,40,65,85,91,105,108,110,124,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,176,205,218,219,234,240,242,274,277,278,281,282,283,],[88,88,88,88,88,88,88,88,178,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,178,88,178,178,88,88,88,88,88,88,178,178,178,]),'inplace_assign':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'struct_item':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'arith_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'add_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'sub_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'mul_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'div_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'mod_expr':([34,40,65,85,91,105,108,110,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,153,158,163,205,234,240,242,274,277,278,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'variable_type':([62,131,179,180,220,221,222,252,267,268,287,290,315,],[123,183,226,229,246,247,248,271,284,285,301,303,321,]),'vars_list':([63,],[128,]),'vars_list1':([63,],[129,]),'array_init_list':([124,281,283,],[172,296,299,]),'init_data':([124,176,218,219,281,282,283,],[175,175,243,244,175,297,175,]),'array_init_list1':([124,281,283,],[176,176,176,]),'array_init_data':([124,176,281,283,],[177,223,177,177,]),'ref_init_list':([156,],[207,]),'ref_init_list1':([156,],[208,]),'ref_data':([156,208,],[209,238,]),'struct_list':([251,],[269,]),'struct_list1':([251,],[270,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statements statement','statements',2,'p_statements','pyplm.py',215),
  ('statements -> statement','statements',1,'p_statements','pyplm.py',216),
  ('statement -> declare_statement','statement',1,'p_statement','pyplm.py',220),
  ('statement -> label_statement','statement',1,'p_statement','pyplm.py',221),
  ('statement -> code_statement','statement',1,'p_statement','pyplm.py',222),
  ('code_statement -> control_statement','code_statement',1,'p_code_statement','pyplm.py',227),
  ('code_statement -> exec_statement','code_statement',1,'p_code_statement','pyplm.py',228),
  ('control_statement -> if_then_statement','control_statement',1,'p_control_statement','pyplm.py',255),
  ('control_statement -> else_statement','control_statement',1,'p_control_statement','pyplm.py',256),
  ('control_statement -> do_while_statement','control_statement',1,'p_control_statement','pyplm.py',257),
  ('control_statement -> do_to_statement','control_statement',1,'p_control_statement','pyplm.py',258),
  ('control_statement -> do_case_statement','control_statement',1,'p_control_statement','pyplm.py',259),
  ('exec_statement -> end_statement','exec_statement',1,'p_exec_statement','pyplm.py',264),
  ('exec_statement -> goto_statement','exec_statement',1,'p_exec_statement','pyplm.py',265),
  ('exec_statement -> do_statement','exec_statement',1,'p_exec_statement','pyplm.py',266),
  ('exec_statement -> assign_statement','exec_statement',1,'p_exec_statement','pyplm.py',267),
  ('exec_statement -> call_statement','exec_statement',1,'p_exec_statement','pyplm.py',268),
  ('exec_statement -> return_statement','exec_statement',1,'p_exec_statement','pyplm.py',269),
  ('label_statement -> IDENT COLON','label_statement',2,'p_label_statement','pyplm.py',274),
  ('declare_statement -> DECLARE declare_list SEMICOLON','declare_statement',3,'p_declare_statement','pyplm.py',283),
  ('declare_statement -> declare_procedure','declare_statement',1,'p_declare_statement','pyplm.py',284),
  ('declare_statement -> end_procedure','declare_statement',1,'p_declare_statement','pyplm.py',285),
  ('declare_list -> declare_list1 declare_name','declare_list',2,'p_declare_list','pyplm.py',292),
  ('declare_list -> declare_name','declare_list',1,'p_declare_list','pyplm.py',293),
  ('declare_list1 -> declare_list1 declare_name COMMA','declare_list1',3,'p_declare_list1','pyplm.py',297),
  ('declare_list1 -> declare_name COMMA','declare_list1',2,'p_declare_list1','pyplm.py',298),
  ('declare_name -> declare_literal','declare_name',1,'p_declare_name','pyplm.py',302),
  ('declare_name -> declare_variable','declare_name',1,'p_declare_name','pyplm.py',303),
  ('declare_name -> declare_variable_list','declare_name',1,'p_declare_name','pyplm.py',304),
  ('declare_name -> declare_variable_init','declare_name',1,'p_declare_name','pyplm.py',305),
  ('declare_name -> declare_variable_at','declare_name',1,'p_declare_name','pyplm.py',306),
  ('declare_name -> declare_variable_based','declare_name',1,'p_declare_name','pyplm.py',307),
  ('declare_name -> declare_variable_ext','declare_name',1,'p_declare_name','pyplm.py',308),
  ('declare_name -> declare_array','declare_name',1,'p_declare_name','pyplm.py',309),
  ('declare_name -> declare_array_init1','declare_name',1,'p_declare_name','pyplm.py',310),
  ('declare_name -> declare_array_init2','declare_name',1,'p_declare_name','pyplm.py',311),
  ('declare_name -> declare_string','declare_name',1,'p_declare_name','pyplm.py',312),
  ('declare_name -> declare_array_at','declare_name',1,'p_declare_name','pyplm.py',313),
  ('declare_name -> declare_array_based','declare_name',1,'p_declare_name','pyplm.py',314),
  ('declare_name -> declare_array_ext','declare_name',1,'p_declare_name','pyplm.py',315),
  ('declare_name -> declare_struct_based','declare_name',1,'p_declare_name','pyplm.py',316),
  ('declare_literal -> IDENT LITERALLY STRING','declare_literal',3,'p_declare_literal','pyplm.py',320),
  ('variable_type -> BYTE','variable_type',1,'p_variable_type','pyplm.py',325),
  ('variable_type -> ADDRESS','variable_type',1,'p_variable_type','pyplm.py',326),
  ('declare_variable -> IDENT variable_type','declare_variable',2,'p_declare_variable','pyplm.py',342),
  ('declare_variable_list -> LPARENS vars_list RPARENS variable_type','declare_variable_list',4,'p_declare_variable_list','pyplm.py',364),
  ('vars_list -> vars_list1 IDENT','vars_list',2,'p_vars_list','pyplm.py',379),
  ('vars_list1 -> vars_list1 IDENT COMMA','vars_list1',3,'p_vars_list1','pyplm.py',385),
  ('vars_list1 -> IDENT COMMA','vars_list1',2,'p_vars_list1','pyplm.py',386),
  ('declare_variable_init -> IDENT variable_type DATA LPARENS init_data RPARENS','declare_variable_init',6,'p_declare_variable_init','pyplm.py',395),
  ('declare_variable_at -> IDENT variable_type AT LPARENS init_data RPARENS','declare_variable_at',6,'p_declare_variable_at','pyplm.py',415),
  ('declare_variable_at -> IDENT variable_type AT LPARENS PERIOD IDENT LPARENS number RPARENS RPARENS','declare_variable_at',10,'p_declare_variable_at','pyplm.py',416),
  ('declare_variable_based -> IDENT BASED IDENT variable_type','declare_variable_based',4,'p_declare_variable_based','pyplm.py',444),
  ('declare_variable_ext -> IDENT variable_type EXTERNAL','declare_variable_ext',3,'p_declare_variable_ext','pyplm.py',467),
  ('init_data -> number','init_data',1,'p_init_data','pyplm.py',480),
  ('init_data -> reference','init_data',1,'p_init_data','pyplm.py',481),
  ('declare_array -> IDENT LPARENS number RPARENS variable_type','declare_array',5,'p_declare_array','pyplm.py',486),
  ('declare_array_init1 -> IDENT LPARENS array_init_list RPARENS variable_type','declare_array_init1',5,'p_declare_array_init1','pyplm.py',506),
  ('declare_array_init2 -> IDENT LPARENS number RPARENS variable_type DATA LPARENS array_init_list RPARENS','declare_array_init2',9,'p_declare_array_init2','pyplm.py',528),
  ('array_init_list -> array_init_list1 array_init_data','array_init_list',2,'p_array_init_list','pyplm.py',550),
  ('array_init_list -> array_init_data','array_init_list',1,'p_array_init_list','pyplm.py',551),
  ('array_init_list1 -> array_init_list1 array_init_data COMMA','array_init_list1',3,'p_array_init_list1','pyplm.py',560),
  ('array_init_list1 -> array_init_data COMMA','array_init_list1',2,'p_array_init_list1','pyplm.py',561),
  ('array_init_data -> init_data','array_init_data',1,'p_array_init_data','pyplm.py',570),
  ('array_init_data -> STRING','array_init_data',1,'p_array_init_data','pyplm.py',571),
  ('declare_string -> IDENT LPARENS ASTERIX RPARENS variable_type DATA LPARENS STRING RPARENS','declare_string',9,'p_declare_string','pyplm.py',576),
  ('declare_string -> IDENT LPARENS ASTERIX RPARENS variable_type DATA LPARENS array_init_list RPARENS','declare_string',9,'p_declare_string','pyplm.py',577),
  ('declare_array_at -> IDENT LPARENS number RPARENS variable_type AT LPARENS init_data RPARENS','declare_array_at',9,'p_declare_array_at','pyplm.py',613),
  ('declare_array_based -> IDENT BASED IDENT LPARENS number RPARENS variable_type','declare_array_based',7,'p_declare_array_based','pyplm.py',631),
  ('declare_array_ext -> IDENT LPARENS number RPARENS variable_type EXTERNAL','declare_array_ext',6,'p_declare_array_ext','pyplm.py',654),
  ('declare_struct_based -> IDENT BASED IDENT STRUCTURE LPARENS struct_list RPARENS','declare_struct_based',7,'p_declare_struct_based','pyplm.py',669),
  ('struct_list -> struct_list1 IDENT variable_type','struct_list',3,'p_struct_list','pyplm.py',690),
  ('struct_list -> IDENT variable_type','struct_list',2,'p_struct_list','pyplm.py',691),
  ('struct_list1 -> struct_list1 IDENT variable_type COMMA','struct_list1',4,'p_struct_list1','pyplm.py',700),
  ('struct_list1 -> IDENT variable_type COMMA','struct_list1',3,'p_struct_list1','pyplm.py',701),
  ('declare_procedure -> procedure_arg0','declare_procedure',1,'p_declare_procedure','pyplm.py',710),
  ('declare_procedure -> procedure_arg0_noret','declare_procedure',1,'p_declare_procedure','pyplm.py',711),
  ('declare_procedure -> procedure_arg1','declare_procedure',1,'p_declare_procedure','pyplm.py',712),
  ('declare_procedure -> procedure_arg1_noret','declare_procedure',1,'p_declare_procedure','pyplm.py',713),
  ('declare_procedure -> procedure_arg2','declare_procedure',1,'p_declare_procedure','pyplm.py',714),
  ('declare_procedure -> procedure_arg2_ext','declare_procedure',1,'p_declare_procedure','pyplm.py',715),
  ('declare_procedure -> procedure_arg2_noret','declare_procedure',1,'p_declare_procedure','pyplm.py',716),
  ('declare_procedure -> procedure_arg2_noret_ext','declare_procedure',1,'p_declare_procedure','pyplm.py',717),
  ('declare_procedure -> procedure_arg3','declare_procedure',1,'p_declare_procedure','pyplm.py',718),
  ('declare_procedure -> procedure_arg3_noret','declare_procedure',1,'p_declare_procedure','pyplm.py',719),
  ('procedure_arg0 -> IDENT COLON PROCEDURE variable_type SEMICOLON','procedure_arg0',5,'p_procedure_arg0','pyplm.py',723),
  ('procedure_arg0_noret -> IDENT COLON PROCEDURE SEMICOLON','procedure_arg0_noret',4,'p_procedure_arg0_noret','pyplm.py',735),
  ('procedure_arg1 -> IDENT COLON PROCEDURE LPARENS IDENT RPARENS variable_type SEMICOLON','procedure_arg1',8,'p_procedure_arg1','pyplm.py',743),
  ('procedure_arg1_noret -> IDENT COLON PROCEDURE LPARENS IDENT RPARENS SEMICOLON','procedure_arg1_noret',7,'p_procedure_arg1_noret','pyplm.py',755),
  ('procedure_arg2 -> IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS variable_type SEMICOLON','procedure_arg2',10,'p_procedure_arg2','pyplm.py',763),
  ('procedure_arg2_noret -> IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS SEMICOLON','procedure_arg2_noret',9,'p_procedure_arg2_noret','pyplm.py',775),
  ('procedure_arg2_ext -> IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS variable_type EXTERNAL SEMICOLON','procedure_arg2_ext',11,'p_procedure_arg2_ext','pyplm.py',783),
  ('procedure_arg2_noret_ext -> IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT RPARENS EXTERNAL SEMICOLON','procedure_arg2_noret_ext',10,'p_procedure_arg2_noret_ext','pyplm.py',795),
  ('procedure_arg3 -> IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT COMMA IDENT RPARENS variable_type SEMICOLON','procedure_arg3',12,'p_procedure_arg3','pyplm.py',803),
  ('procedure_arg3_noret -> IDENT COLON PROCEDURE LPARENS IDENT COMMA IDENT COMMA IDENT RPARENS SEMICOLON','procedure_arg3_noret',11,'p_procedure_arg3_noret','pyplm.py',815),
  ('do_statement -> DO SEMICOLON','do_statement',2,'p_do_statement','pyplm.py',822),
  ('cond_expr -> rel_expr','cond_expr',1,'p_cond_expr','pyplm.py',833),
  ('cond_expr -> bool_expr','cond_expr',1,'p_cond_expr','pyplm.py',834),
  ('cond_expr -> logic_expr','cond_expr',1,'p_cond_expr','pyplm.py',835),
  ('do_while_statement -> DO WHILE cond_expr SEMICOLON','do_while_statement',4,'p_do_while_statement','pyplm.py',840),
  ('do_case_statement -> DO CASE expr SEMICOLON','do_case_statement',4,'p_do_case_statement','pyplm.py',857),
  ('do_to_statement -> DO IDENT EQUAL expr TO expr SEMICOLON','do_to_statement',7,'p_do_to_statement','pyplm.py',884),
  ('do_to_statement -> DO IDENT EQUAL expr TO expr BY expr SEMICOLON','do_to_statement',9,'p_do_to_statement','pyplm.py',885),
  ('end_statement -> END SEMICOLON','end_statement',2,'p_end_statement','pyplm.py',990),
  ('end_procedure -> END IDENT SEMICOLON','end_procedure',3,'p_end_procedure','pyplm.py',1012),
  ('if_then_statement -> IF cond_expr THEN code_statement','if_then_statement',4,'p_if_then_statement','pyplm.py',1032),
  ('else_statement -> ELSE code_statement','else_statement',2,'p_else_statement','pyplm.py',1064),
  ('goto_statement -> GO TO IDENT SEMICOLON','goto_statement',4,'p_goto_statement','pyplm.py',1092),
  ('call_statement -> CALL IDENT SEMICOLON','call_statement',3,'p_call_statement','pyplm.py',1102),
  ('call_statement -> CALL IDENT LPARENS expr RPARENS SEMICOLON','call_statement',6,'p_call_statement','pyplm.py',1103),
  ('call_statement -> CALL IDENT LPARENS expr COMMA expr RPARENS SEMICOLON','call_statement',8,'p_call_statement','pyplm.py',1104),
  ('call_statement -> CALL IDENT LPARENS expr COMMA expr COMMA expr RPARENS SEMICOLON','call_statement',10,'p_call_statement','pyplm.py',1105),
  ('return_statement -> RETURN SEMICOLON','return_statement',2,'p_return_statement','pyplm.py',1140),
  ('return_statement -> RETURN expr SEMICOLON','return_statement',3,'p_return_statement','pyplm.py',1141),
  ('assign_statement -> assign_list EQUAL expr SEMICOLON','assign_statement',4,'p_assign_statement','pyplm.py',1164),
  ('assign_list -> assign_list1 assign_var','assign_list',2,'p_assign_list','pyplm.py',1288),
  ('assign_list -> assign_var','assign_list',1,'p_assign_list','pyplm.py',1289),
  ('assign_list1 -> assign_list1 assign_var COMMA','assign_list1',3,'p_assign_list1','pyplm.py',1298),
  ('assign_list1 -> assign_var COMMA','assign_list1',2,'p_assign_list1','pyplm.py',1299),
  ('assign_var -> IDENT LPARENS expr RPARENS','assign_var',4,'p_assign_var','pyplm.py',1308),
  ('assign_var -> IDENT','assign_var',1,'p_assign_var','pyplm.py',1309),
  ('expr -> element_expr','expr',1,'p_expr','pyplm.py',1317),
  ('expr -> arith_expr','expr',1,'p_expr','pyplm.py',1318),
  ('expr -> logic_expr','expr',1,'p_expr','pyplm.py',1319),
  ('expr -> rel_expr','expr',1,'p_expr','pyplm.py',1320),
  ('expr -> LPARENS expr RPARENS','expr',3,'p_expr','pyplm.py',1321),
  ('arith_expr -> add_expr','arith_expr',1,'p_arith_expr','pyplm.py',1329),
  ('arith_expr -> sub_expr','arith_expr',1,'p_arith_expr','pyplm.py',1330),
  ('arith_expr -> mul_expr','arith_expr',1,'p_arith_expr','pyplm.py',1331),
  ('arith_expr -> div_expr','arith_expr',1,'p_arith_expr','pyplm.py',1332),
  ('arith_expr -> mod_expr','arith_expr',1,'p_arith_expr','pyplm.py',1333),
  ('logic_expr -> and_expr','logic_expr',1,'p_logic_expr','pyplm.py',1338),
  ('logic_expr -> or_expr','logic_expr',1,'p_logic_expr','pyplm.py',1339),
  ('logic_expr -> not_expr','logic_expr',1,'p_logic_expr','pyplm.py',1340),
  ('rel_expr -> noteq_expr','rel_expr',1,'p_rel_expr','pyplm.py',1345),
  ('rel_expr -> eq_expr','rel_expr',1,'p_rel_expr','pyplm.py',1346),
  ('rel_expr -> lt_expr','rel_expr',1,'p_rel_expr','pyplm.py',1347),
  ('rel_expr -> gt_expr','rel_expr',1,'p_rel_expr','pyplm.py',1348),
  ('rel_expr -> lteq_expr','rel_expr',1,'p_rel_expr','pyplm.py',1349),
  ('rel_expr -> gteq_expr','rel_expr',1,'p_rel_expr','pyplm.py',1350),
  ('add_expr -> expr PLUS expr','add_expr',3,'p_add_expr','pyplm.py',1355),
  ('sub_expr -> expr MINUS expr','sub_expr',3,'p_sub_expr','pyplm.py',1361),
  ('mul_expr -> expr ASTERIX expr','mul_expr',3,'p_mul_expr','pyplm.py',1367),
  ('div_expr -> expr DIV expr','div_expr',3,'p_div_expr','pyplm.py',1373),
  ('mod_expr -> expr MOD expr','mod_expr',3,'p_mod_expr','pyplm.py',1379),
  ('and_expr -> expr AND expr','and_expr',3,'p_and_expr','pyplm.py',1385),
  ('or_expr -> expr OR expr','or_expr',3,'p_or_expr','pyplm.py',1391),
  ('not_expr -> NOT expr','not_expr',2,'p_not_expr','pyplm.py',1397),
  ('eq_expr -> expr EQUAL expr','eq_expr',3,'p_eq_expr','pyplm.py',1403),
  ('noteq_expr -> expr NOTEQUAL expr','noteq_expr',3,'p_noteq_expr','pyplm.py',1409),
  ('lt_expr -> expr LESSTHAN expr','lt_expr',3,'p_lt_expr','pyplm.py',1415),
  ('lteq_expr -> expr LESSTHANEQUAL expr','lteq_expr',3,'p_lteq_expr','pyplm.py',1421),
  ('gt_expr -> expr GREATERTHAN expr','gt_expr',3,'p_gt_expr','pyplm.py',1427),
  ('gteq_expr -> expr GREATERTHANEQUAL expr','gteq_expr',3,'p_gteq_expr','pyplm.py',1433),
  ('bool_expr -> element_expr','bool_expr',1,'p_bool_expr','pyplm.py',1439),
  ('element_expr -> number','element_expr',1,'p_element_expr','pyplm.py',1445),
  ('element_expr -> IDENT','element_expr',1,'p_element_expr','pyplm.py',1446),
  ('element_expr -> IDENT LPARENS expr RPARENS','element_expr',4,'p_element_expr','pyplm.py',1447),
  ('element_expr -> proc_call2','element_expr',1,'p_element_expr','pyplm.py',1448),
  ('element_expr -> proc_call3','element_expr',1,'p_element_expr','pyplm.py',1449),
  ('element_expr -> reference','element_expr',1,'p_element_expr','pyplm.py',1450),
  ('element_expr -> reference LPARENS expr RPARENS','element_expr',4,'p_element_expr','pyplm.py',1451),
  ('element_expr -> inplace_assign','element_expr',1,'p_element_expr','pyplm.py',1452),
  ('element_expr -> struct_item','element_expr',1,'p_element_expr','pyplm.py',1453),
  ('proc_call2 -> IDENT LPARENS expr COMMA expr RPARENS','proc_call2',6,'p_proc_call2','pyplm.py',1480),
  ('proc_call3 -> IDENT LPARENS expr COMMA expr COMMA expr RPARENS','proc_call3',8,'p_proc_call3','pyplm.py',1486),
  ('inplace_assign -> IDENT ASSIGN expr','inplace_assign',3,'p_inplace_assign','pyplm.py',1491),
  ('inplace_assign -> LPARENS IDENT ASSIGN expr RPARENS','inplace_assign',5,'p_inplace_assign','pyplm.py',1492),
  ('reference -> PERIOD IDENT','reference',2,'p_reference','pyplm.py',1507),
  ('reference -> PERIOD LPARENS ref_init_list RPARENS','reference',4,'p_reference','pyplm.py',1508),
  ('ref_init_list -> ref_init_list1 ref_data','ref_init_list',2,'p_ref_init_list','pyplm.py',1530),
  ('ref_init_list -> ref_data','ref_init_list',1,'p_ref_init_list','pyplm.py',1531),
  ('ref_init_list1 -> ref_init_list1 ref_data COMMA','ref_init_list1',3,'p_ref_init_list1','pyplm.py',1540),
  ('ref_init_list1 -> ref_data COMMA','ref_init_list1',2,'p_ref_init_list1','pyplm.py',1541),
  ('ref_data -> number','ref_data',1,'p_ref_data','pyplm.py',1550),
  ('ref_data -> STRING','ref_data',1,'p_ref_data','pyplm.py',1551),
  ('struct_item -> IDENT PERIOD IDENT','struct_item',3,'p_struct_item','pyplm.py',1556),
  ('number -> DECNUMBER','number',1,'p_number','pyplm.py',1566),
  ('number -> HEXNUMBER','number',1,'p_number','pyplm.py',1567),
  ('number -> BINNUMBER','number',1,'p_number','pyplm.py',1568),
]
